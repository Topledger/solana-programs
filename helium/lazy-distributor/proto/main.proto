syntax = "proto2";

package sf.solana.block_meta.v1;

message PbOracleConfigV0Layout {
  required string oracle = 1;
  required string url = 2;
}

message PbWindowedCircuitBreakerConfigV0Layout {
  required uint64 windowSizeSeconds = 1;
  required string thresholdType = 2;
  required uint64 threshold = 3;
}

message PbInitializeLazyDistributorArgsV0Layout {
  repeated PbOracleConfigV0Layout oracles = 1;
  required string authority = 2;
  required PbWindowedCircuitBreakerConfigV0Layout windowConfig = 3;
  optional string approver = 4;
}

message PbInitializeCompressionRecipientArgsV0Layout {
  repeated uint32 dataHash = 1;
  repeated uint32 creatorHash = 2;
  repeated uint32 root = 3;
  required uint32 index = 4;
}

message PbSetCurrentRewardsArgsV0Layout {
  required uint32 oracleIndex = 1;
  required uint64 currentRewards = 2;
}

message PbDistributeCompressionRewardsArgsV0Layout {
  repeated uint32 dataHash = 1;
  repeated uint32 creatorHash = 2;
  repeated uint32 root = 3;
  required uint32 index = 4;
}

message PbUpdateLazyDistributorArgsV0Layout {
  repeated PbOracleConfigV0Layout oracles = 1;
  optional string authority = 2;
  optional string approver = 3;
}

message PbInitializeLazyDistributorV0Layout {
  required PbInitializeLazyDistributorArgsV0Layout initializeLazyDistributorV0Args = 1;
}

message PbInitializeCompressionRecipientV0Layout {
  required PbInitializeCompressionRecipientArgsV0Layout initializeCompressionRecipientV0Args = 1;
}

message PbSetCurrentRewardsV0Layout {
  required PbSetCurrentRewardsArgsV0Layout setCurrentRewardsV0Args = 1;
}

message PbDistributeCompressionRewardsV0Layout {
  required PbDistributeCompressionRewardsArgsV0Layout distributeCompressionRewardsV0Args = 1;
}

message PbUpdateLazyDistributorV0Layout {
  required PbUpdateLazyDistributorArgsV0Layout updateLazyDistributorV0Args = 1;
}

message Arg {
  required string instruction_type = 1;
  optional PbInitializeLazyDistributorV0Layout initializeLazyDistributorV0 = 2;
  optional PbInitializeCompressionRecipientV0Layout initializeCompressionRecipientV0 = 3;
  optional PbSetCurrentRewardsV0Layout setCurrentRewardsV0 = 4;
  optional PbDistributeCompressionRewardsV0Layout distributeCompressionRewardsV0 = 5;
  optional PbUpdateLazyDistributorV0Layout updateLazyDistributorV0 = 6;
}

message InputAccounts {
  optional string payer = 1;
  optional string lazyDistributor = 2;
  optional string rewardsMint = 3;
  optional string rewardsEscrow = 4;
  optional string circuitBreaker = 5;
  optional string systemProgram = 6;
  optional string associatedTokenProgram = 7;
  optional string circuitBreakerProgram = 8;
  optional string tokenProgram = 9;
  optional string recipient = 10;
  optional string mint = 11;
  optional string targetMetadata = 12;
  optional string merkleTree = 13;
  optional string owner = 14;
  optional string delegate = 15;
  optional string compressionProgram = 16;
  optional string oracle = 17;
  optional string common_payer = 18;
  optional string common_lazyDistributor = 19;
  optional string common_recipient = 20;
  optional string common_rewardsMint = 21;
  optional string common_rewardsEscrow = 22;
  optional string common_circuitBreaker = 23;
  optional string common_owner = 24;
  optional string common_destinationAccount = 25;
  optional string common_associatedTokenProgram = 26;
  optional string common_circuitBreakerProgram = 27;
  optional string common_systemProgram = 28;
  optional string common_tokenProgram = 29;
  optional string recipientMintAccount = 30;
  optional string authority = 31;
}

message Meta {
  required string block_date = 1;
  required int64 block_time = 2;
  required string tx_id = 3;
  required string dapp = 4;
  required uint64 block_slot = 5;
  required uint32 instruction_index = 7;
  required bool is_inner_instruction = 8;
  required uint32 inner_instruction_index = 9;
  required string instruction_type = 10;
  required Arg args = 11;
  required InputAccounts input_accounts = 12;
}

message Output {
  repeated Meta data = 1;
}