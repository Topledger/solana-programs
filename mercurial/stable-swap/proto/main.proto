syntax = "proto2";

package sf.solana.block_meta.v1;

message PbAdminSettingsLayout {
  required bool swap_enabled = 1;
  required bool add_liquidity_enabled = 2;
}

message PbInitializeLayout {
  required uint32 nonce = 1;
  required uint64 amplification_coefficient = 2;
  required uint64 fee_numerator = 3;
  required uint32 n_coins = 4;
  required PbAdminSettingsLayout admin_settings = 5;
}

message PbAddLiquidityLayout {
  repeated uint64 deposit_amounts = 1;
  required uint64 min_mint_amount = 2;
}

message PbRemoveLiquidityLayout {
  required uint64 unmint_amount = 1;
  repeated uint64 minimum_amounts = 2;
}

message PbRemoveLiquidityOneTokenLayout {
  required uint64 unmint_amount = 1;
  required uint64 minimum_out_amount = 2;
}

message PbExchangeLayout {
  required uint64 in_amount = 1;
  required uint64 minimum_out_amount = 2;
}

message PbSetAdminSettingLayout {
  required PbAdminSettingsLayout admin_setting = 1;
}

message Arg {
  required string instruction_type = 1;
  optional PbInitializeLayout initialize = 2;
  optional PbAddLiquidityLayout addLiquidity = 3;
  optional PbRemoveLiquidityLayout removeLiquidity = 4;
  optional PbRemoveLiquidityOneTokenLayout removeLiquidityOneToken = 5;
  optional PbExchangeLayout exchange = 6;
  optional PbSetAdminSettingLayout setAdminSetting = 7;
}

message InputAccounts {
  optional string swapInfo = 1;
  optional string authority = 2;
  repeated string tokenAccounts = 3;
  repeated string tokenMints = 4;
  optional string poolTokenMint = 5;
  optional string adminTokenMint = 6;
  optional string tokenProgramId = 7;
  optional string userTransferAuthority = 8;
  repeated string sourceTokenAccounts = 9;
  optional string userLpTokenAccount = 10;
  optional string sourceTokenAccount = 11;
  optional string destinationTokenAccount = 12;
  optional string adminTokenAccount = 13;
  optional string adminNFTOwner = 14;
}

message Meta {
  required string block_date = 1;
  required int64 block_time = 2;
  required string tx_id = 3;
  required string dapp = 4;
  required uint64 block_slot = 5;
  required uint32 instruction_index = 7;
  required bool is_inner_instruction = 8;
  required uint32 inner_instruction_index = 9;
  required string instruction_type = 10;
  required Arg args = 11;
  required InputAccounts input_accounts = 12;
}

message Output {
  repeated Meta data = 1;
}