// This file is @generated by prost-build.
/// Main instructions container
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Output {
    #[prost(message, repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<Meta>,
}
/// Metadata for an instruction
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Meta {
    #[prost(string, tag = "1")]
    pub tx_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub block_slot: u64,
    #[prost(int64, tag = "3")]
    pub block_time: i64,
    #[prost(string, tag = "4")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "5")]
    pub instruction_index: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "6")]
    pub is_inner_instruction: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub inner_instruction_index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub signer: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub outer_program: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "10")]
    pub instruction_type: ::prost::alloc::string::String,
    /// Map of account roles to their addresses, key is role name, value is account address
    #[prost(map = "string, string", tag = "14")]
    pub input_accounts: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Instruction data
    #[prost(message, optional, tag = "12")]
    pub args: ::core::option::Option<InstructionArgs>,
}
/// Flattened args for easy querying
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlatArg {
    #[prost(int32, optional, tag = "1")]
    pub tick_spacing: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub index: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub trade_fee_rate: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub protocol_fee_rate: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub fund_fee_rate: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "6")]
    pub param: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "7")]
    pub value: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "8")]
    pub sqrt_price_x64: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "9")]
    pub open_time: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "10")]
    pub status: ::core::option::Option<u32>,
    #[prost(string, repeated, tag = "11")]
    pub keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub new_owner: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "13")]
    pub params: ::prost::alloc::vec::Vec<PbInitializeRewardParam>,
    #[prost(uint32, optional, tag = "14")]
    pub reward_index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "15")]
    pub emissions_per_second_x64: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "16")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "17")]
    pub amount0_requested: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "18")]
    pub amount1_requested: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "19")]
    pub tick_lower_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "20")]
    pub tick_upper_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "21")]
    pub tick_array_lower_start_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "22")]
    pub tick_array_upper_start_index: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "23")]
    pub liquidity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "24")]
    pub amount0_max: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "25")]
    pub amount1_max: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "26")]
    pub with_metadata: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "27")]
    pub liquidity_amount: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "28")]
    pub amount0_min: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "29")]
    pub amount1_min: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "30")]
    pub is_base_input: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "31")]
    pub amount_specified: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "32")]
    pub amount_limit: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "33")]
    pub sqrt_price_limit_x64: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "34")]
    pub is_base_input_v2: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "35")]
    pub amount_specified_v2: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "36")]
    pub other_amount_threshold: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "37")]
    pub sqrt_price_limit_x64_v2: ::core::option::Option<u64>,
}
/// Main instruction arguments structure
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructionArgs {
    #[prost(
        oneof = "instruction_args::InstructionArgs",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120"
    )]
    pub instruction_args: ::core::option::Option<instruction_args::InstructionArgs>,
}
/// Nested message and enum types in `InstructionArgs`.
pub mod instruction_args {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InstructionArgs {
        /// Core pool operations
        #[prost(message, tag = "1")]
        CreatePool(super::PbCreatePoolLayout),
        #[prost(message, tag = "2")]
        InitializeTickArray(super::PbInitializeTickArrayLayout),
        #[prost(message, tag = "3")]
        CreatePosition(super::PbCreatePositionLayout),
        #[prost(message, tag = "4")]
        ClosePosition(super::PbClosePositionLayout),
        #[prost(message, tag = "5")]
        Swap(super::PbSwapLayout),
        #[prost(message, tag = "6")]
        SwapRouterBaseIn(super::PbSwapRouterBaseInLayout),
        #[prost(message, tag = "7")]
        InitializeReward(super::PbInitializeRewardLayout),
        #[prost(message, tag = "8")]
        SetRewardEmissions(super::PbSetRewardEmissionsLayout),
        #[prost(message, tag = "9")]
        ClaimReward(super::PbClaimRewardLayout),
        #[prost(message, tag = "10")]
        ClaimFees(super::PbClaimFeesLayout),
        #[prost(message, tag = "11")]
        TransferPositionOwner(super::PbTransferPositionOwnerLayout),
        #[prost(message, tag = "12")]
        UpdateFees(super::PbUpdateFeesLayout),
        /// Used for legacy AddLiquidity
        #[prost(message, tag = "13")]
        AddLiquidity(super::PbAddLiquidityLayout),
        /// Used for legacy RemoveLiquidity
        #[prost(message, tag = "14")]
        RemoveLiquidity(super::PbRemoveLiquidityLayout),
        #[prost(message, tag = "15")]
        InitializeConfig(super::PbInitializeConfigLayout),
        #[prost(message, tag = "16")]
        UpdateConfig(super::PbUpdateConfigLayout),
        /// Additional Meteora-specific instruction layouts
        #[prost(message, tag = "17")]
        InitializeLbPair(super::PbInitializeLbPairLayout),
        #[prost(message, tag = "18")]
        InitializePermissionLbPair(super::PbInitializePermissionLbPairLayout),
        #[prost(message, tag = "19")]
        InitializePosition(super::PbInitializePositionLayout),
        #[prost(message, tag = "20")]
        InitializePositionPda(super::PbInitializePositionPdaLayout),
        #[prost(message, tag = "21")]
        SwapWithPriceImpact(super::PbSwapWithPriceImpactLayout),
        #[prost(message, tag = "22")]
        SwapExactOut(super::PbSwapExactOutLayout),
        /// Add other instruction layouts
        #[prost(message, tag = "23")]
        InitializeCustomizablePermissionlessLbPair(
            super::PbInitializeCustomizablePermissionlessLbPairLayout,
        ),
        #[prost(message, tag = "24")]
        CloseLbPair(super::PbCloseLbPairLayout),
        #[prost(message, tag = "25")]
        InitializeBinArray(super::PbInitializeBinArrayLayout),
        #[prost(message, tag = "26")]
        InitializeBinArrayBitmapExtension(
            super::PbInitializeBinArrayBitmapExtensionLayout,
        ),
        #[prost(message, tag = "27")]
        AddLiquidityByWeight(super::PbAddLiquidityByWeightLayout),
        #[prost(message, tag = "28")]
        AddLiquidityByStrategy(super::PbAddLiquidityByStrategyLayout),
        #[prost(message, tag = "29")]
        AddLiquidityOneSide(super::PbAddLiquidityOneSideLayout),
        #[prost(message, tag = "30")]
        AddLiquidityByStrategyOneSide(super::PbAddLiquidityByStrategyOneSideLayout),
        #[prost(message, tag = "31")]
        AddLiquidityOneSidePrecise(super::PbAddLiquidityOneSidePreciseLayout),
        #[prost(message, tag = "33")]
        RemoveAllLiquidity(super::PbRemoveAllLiquidityLayout),
        #[prost(message, tag = "34")]
        RemoveLiquidityByRange(super::PbRemoveLiquidityByRangeLayout),
        #[prost(message, tag = "35")]
        RemoveLiquiditySingleSide(super::PbRemoveLiquiditySingleSideLayout),
        #[prost(message, tag = "36")]
        GoToABin(super::PbGoToABinLayout),
        #[prost(message, tag = "37")]
        InitializePositionByOperator(super::PbInitializePositionByOperatorLayout),
        #[prost(message, tag = "38")]
        UpdatePositionOperator(super::PbUpdatePositionOperatorLayout),
        #[prost(message, tag = "39")]
        ClaimLiquidity(super::PbClaimLiquidityLayout),
        #[prost(message, tag = "40")]
        WithdrawProtocolFee(super::PbWithdrawProtocolFeeLayout),
        #[prost(message, tag = "41")]
        UpdateFeeParameters(super::PbUpdateFeeParametersLayout),
        #[prost(message, tag = "42")]
        UpdateFeeOwner(super::PbUpdateFeeOwnerLayout),
        #[prost(message, tag = "43")]
        FundReward(super::PbFundRewardLayout),
        #[prost(message, tag = "44")]
        UpdateRewardFunder(super::PbUpdateRewardFunderLayout),
        #[prost(message, tag = "45")]
        UpdateRewardDuration(super::PbUpdateRewardDurationLayout),
        #[prost(message, tag = "46")]
        WithdrawIneligibleReward(super::PbWithdrawIneligibleRewardLayout),
        #[prost(message, tag = "47")]
        ClosePresetParameter(super::PbClosePresetParameterLayout),
        #[prost(message, tag = "48")]
        InitializePresetParameter(super::PbInitializePresetParameterLayout),
        #[prost(message, tag = "49")]
        InitializePresetParameterV2(super::PbInitializePresetParameterV2Layout),
        #[prost(message, tag = "50")]
        TogglePairStatus(super::PbTogglePairStatusLayout),
        #[prost(message, tag = "51")]
        UpdateWhitelistedWallet(super::PbUpdateWhitelistedWalletLayout),
        #[prost(message, tag = "52")]
        IncreaseOracleLength(super::PbIncreaseOracleLengthLayout),
        #[prost(message, tag = "53")]
        MigratePosition(super::PbMigratePositionLayout),
        #[prost(message, tag = "54")]
        MigrateBinArray(super::PbMigrateBinArrayLayout),
        #[prost(message, tag = "55")]
        UpdateFeesAndRewards(super::PbUpdateFeesAndRewardsLayout),
        #[prost(message, tag = "56")]
        SetLockReleaseSlot(super::PbSetLockReleaseSlotLayout),
        #[prost(message, tag = "57")]
        SetActivationSlot(super::PbSetActivationSlotLayout),
        #[prost(message, tag = "58")]
        SetMaxSwappedAmount(super::PbSetMaxSwappedAmountLayout),
        #[prost(message, tag = "59")]
        SetPreActivationDuration(super::PbSetPreActivationDurationLayout),
        #[prost(message, tag = "60")]
        SetPreActivationSwapAddress(super::PbSetPreActivationSwapAddressLayout),
        #[prost(message, tag = "61")]
        IdlWrite(super::PbIdlWriteLayout),
        /// Event logs - Use the wrapper now
        #[prost(message, tag = "100")]
        EventLog(super::PbEventLogWrapper),
        /// V2 Instructions
        #[prost(message, tag = "101")]
        InitializeLbPair2(super::PbInitializeLbPair2Layout),
        #[prost(message, tag = "102")]
        ClaimFee2(super::PbClaimFee2Layout),
        /// Add other V2 layouts here as they are implemented
        #[prost(message, tag = "103")]
        InitializeCustomizablePermissionlessLbPair2(
            super::PbInitializeCustomizablePermissionlessLbPair2Layout,
        ),
        #[prost(message, tag = "104")]
        AddLiquidity2(super::PbAddLiquidity2Layout),
        #[prost(message, tag = "105")]
        AddLiquidityByStrategy2(super::PbAddLiquidityByStrategy2Layout),
        #[prost(message, tag = "106")]
        AddLiquidityOneSidePrecise2(super::PbAddLiquidityOneSidePrecise2Layout),
        #[prost(message, tag = "107")]
        AddLiquidityByStrategyOneSide2(super::PbAddLiquidityByStrategyOneSide2Layout),
        #[prost(message, tag = "108")]
        RemoveLiquidity2(super::PbRemoveLiquidity2Layout),
        #[prost(message, tag = "109")]
        RemoveLiquidityByRange2(super::PbRemoveLiquidityByRange2Layout),
        #[prost(message, tag = "110")]
        Swap2(super::PbSwap2Layout),
        #[prost(message, tag = "111")]
        SwapExactOut2(super::PbSwapExactOut2Layout),
        #[prost(message, tag = "112")]
        SwapWithPriceImpact2(super::PbSwapWithPriceImpact2Layout),
        #[prost(message, tag = "113")]
        ClosePosition2(super::PbClosePosition2Layout),
        /// Maps to UpdateFeesAndRewards in enum
        #[prost(message, tag = "114")]
        UpdateFeesAndReward2(super::PbUpdateFeesAndReward2Layout),
        #[prost(message, tag = "115")]
        ClosePositionIfEmpty(super::PbClosePositionIfEmptyLayout),
        /// No args, but keep for completeness
        #[prost(message, tag = "116")]
        InitializeTokenBadge(super::PbInitializeTokenBadgeLayout),
        /// No args
        #[prost(message, tag = "117")]
        CreateClaimProtocolFeeOperator(super::PbCreateClaimProtocolFeeOperatorLayout),
        /// No args
        #[prost(message, tag = "118")]
        CloseClaimProtocolFeeOperator(super::PbCloseClaimProtocolFeeOperatorLayout),
        #[prost(message, tag = "119")]
        SetActivationPoint(super::PbSetActivationPointLayout),
        #[prost(message, tag = "120")]
        ClaimReward2(super::PbClaimReward2Layout),
    }
}
/// Common types
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbPubKey {
    #[prost(string, tag = "1")]
    pub pubkey: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInt128 {
    #[prost(string, tag = "1")]
    pub value: ::prost::alloc::string::String,
}
/// Instruction specific layouts
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializeRewardParam {
    #[prost(string, tag = "1")]
    pub mint: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub vault: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub authority: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub emissions_per_second_x64: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub open_time: u64,
    #[prost(uint64, tag = "6")]
    pub end_time: u64,
}
/// New message for InitPermissionPairIx struct (Based on user example)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitPermissionPairIx {
    /// i32
    #[prost(int32, optional, tag = "1")]
    pub active_id: ::core::option::Option<i32>,
    /// u16 -> u32
    #[prost(uint32, optional, tag = "2")]
    pub bin_step: ::core::option::Option<u32>,
    /// u16 -> u32
    #[prost(uint32, optional, tag = "3")]
    pub base_factor: ::core::option::Option<u32>,
    /// i32
    #[prost(int32, optional, tag = "4")]
    pub min_bin_id: ::core::option::Option<i32>,
    /// i32
    #[prost(int32, optional, tag = "5")]
    pub max_bin_id: ::core::option::Option<i32>,
    /// u64
    #[prost(uint64, optional, tag = "6")]
    pub lock_duration: ::core::option::Option<u64>,
    /// u8 -> u32
    #[prost(uint32, optional, tag = "7")]
    pub activation_type: ::core::option::Option<u32>,
}
/// Meteora DLMM specific layouts
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreatePoolLayout {
    #[prost(string, tag = "1")]
    pub token_mint_a: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub token_mint_b: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub tick_spacing: i32,
    #[prost(string, tag = "4")]
    pub initial_sqrt_price_x64: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeTickArrayLayout {
    #[prost(int32, tag = "1")]
    pub start_tick_index: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreatePositionLayout {
    #[prost(int32, tag = "1")]
    pub tick_lower_index: i32,
    #[prost(int32, tag = "2")]
    pub tick_upper_index: i32,
    #[prost(string, tag = "3")]
    pub liquidity_amount: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub token_max_a: u64,
    #[prost(uint64, tag = "5")]
    pub token_max_b: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClosePositionLayout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSwapLayout {
    #[prost(string, optional, tag = "1")]
    pub amount_in: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub min_amount_out: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSwapRouterBaseInLayout {
    #[prost(uint64, tag = "1")]
    pub amount_in: u64,
    #[prost(uint64, tag = "2")]
    pub amount_out_min: u64,
    #[prost(uint64, tag = "3")]
    pub sqrt_price_limit_x64: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializeRewardLayout {
    #[prost(uint64, optional, tag = "1")]
    pub reward_index: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub reward_duration: ::core::option::Option<u64>,
    /// publicKey mapped to string
    #[prost(string, optional, tag = "3")]
    pub funder: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSetRewardEmissionsLayout {
    #[prost(uint32, tag = "1")]
    pub reward_index: u32,
    #[prost(string, tag = "2")]
    pub emissions_per_second_x64: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub open_time: u64,
    #[prost(uint64, tag = "4")]
    pub end_time: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClaimRewardLayout {
    #[prost(uint64, optional, tag = "1")]
    pub reward_index: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClaimFeesLayout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbTransferPositionOwnerLayout {
    #[prost(string, tag = "1")]
    pub new_owner: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateFeesLayout {
    #[prost(uint64, tag = "1")]
    pub trade_fee_rate: u64,
    #[prost(uint64, tag = "2")]
    pub protocol_fee_rate: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityLayout {
    #[prost(message, optional, tag = "1")]
    pub liquidity_parameter: ::core::option::Option<PbLiquidityParameter>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbRemoveLiquidityLayout {
    #[prost(message, repeated, tag = "1")]
    pub bin_liquidity_removal: ::prost::alloc::vec::Vec<PbBinLiquidityReduction>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeConfigLayout {
    #[prost(uint64, tag = "1")]
    pub trade_fee_rate: u64,
    #[prost(uint64, tag = "2")]
    pub protocol_fee_rate: u64,
    #[prost(uint64, tag = "3")]
    pub tick_spacing: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateConfigLayout {
    #[prost(uint32, optional, tag = "1")]
    pub param: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub value: ::core::option::Option<u64>,
}
/// Parameters for InitializeCustomizablePermissionlessLbPair (Corrected)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializeCustomizablePermissionlessLbPairLayout {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<PbCustomizableParams>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeLbPairLayout {
    /// Use direct fields instead of nested structure
    /// optional PbInitLbPairIx ix_data = 1;
    #[prost(int32, optional, tag = "1")]
    pub active_id: ::core::option::Option<i32>,
    /// Represents Int16ul
    #[prost(uint32, optional, tag = "2")]
    pub bin_step: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializePermissionLbPairLayout {
    /// Changed to hold the nested struct
    ///
    /// active_id and bin_step removed from here
    #[prost(message, optional, tag = "1")]
    pub ix_data: ::core::option::Option<PbInitPermissionPairIx>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializePositionLayout {
    #[prost(int32, optional, tag = "1")]
    pub lower_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub width: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializePositionPdaLayout {
    #[prost(int32, optional, tag = "1")]
    pub lower_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub width: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSwapWithPriceImpactLayout {
    #[prost(uint64, optional, tag = "1")]
    pub amount_in: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub active_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub max_price_impact_bps: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSwapExactOutLayout {
    #[prost(uint64, optional, tag = "1")]
    pub max_in_amount: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub out_amount: ::core::option::Option<u64>,
}
/// Helper messages for liquidity parameters
///
/// Fields for general liquidity, maybe amountX/Y?
/// Define based on Rust usage for other instructions like AddLiquidityByWeight if needed.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbLiquidityParameterLayout {}
/// Specific layout for BinLiquidityDistributionByWeight
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbBinLiquidityDistributionByWeightLayout {
    #[prost(int32, optional, tag = "1")]
    pub bin_id: ::core::option::Option<i32>,
    /// u16 in IDL -> uint32
    #[prost(uint32, optional, tag = "2")]
    pub weight: ::core::option::Option<u32>,
}
/// Corresponds to LiquidityParameterByWeight struct in IDL
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbLiquidityParameterByWeight {
    #[prost(uint64, optional, tag = "1")]
    pub amount_x: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub amount_y: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub active_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub max_active_bin_slippage: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub bin_liquidity_dist: ::prost::alloc::vec::Vec<
        PbBinLiquidityDistributionByWeightLayout,
    >,
}
/// Placeholder definitions for missing layouts with fields added
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbCloseLbPairLayout {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeBinArrayLayout {
    #[prost(int64, optional, tag = "1")]
    pub index: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeBinArrayBitmapExtensionLayout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityByWeightLayout {
    #[prost(message, optional, tag = "1")]
    pub liquidity_parameter: ::core::option::Option<PbLiquidityParameterByWeight>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityByStrategyLayout {
    #[prost(message, optional, tag = "1")]
    pub liquidity_parameter: ::core::option::Option<PbLiquidityParameterByStrategy>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityOneSideLayout {
    /// Fields moved directly here from the removed PbLiquidityOneSideParameterLayout
    #[prost(uint64, optional, tag = "1")]
    pub amount: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub active_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub max_active_bin_slippage: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub bin_liquidity_dist: ::prost::alloc::vec::Vec<
        PbBinLiquidityDistributionByWeightLayout,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityByStrategyOneSideLayout {
    #[prost(message, optional, tag = "1")]
    pub liquidity_parameter: ::core::option::Option<
        PbLiquidityParameterByStrategyOneSide,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityOneSidePreciseLayout {
    /// Fields moved from Python's AddLiquidityOneSidePreciseParameterLayout
    #[prost(message, repeated, tag = "1")]
    pub bins: ::prost::alloc::vec::Vec<PbCompressedBinDepositAmountLayout>,
    #[prost(uint64, optional, tag = "2")]
    pub decompress_multiplier: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbRemoveAllLiquidityLayout {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbRemoveLiquidityByRangeLayout {
    #[prost(int32, optional, tag = "1")]
    pub from_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub to_bin_id: ::core::option::Option<i32>,
    /// Assuming i16 maps to int32
    #[prost(int32, optional, tag = "3")]
    pub bps_to_remove: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbRemoveLiquiditySingleSideLayout {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbGoToABinLayout {
    #[prost(int32, optional, tag = "1")]
    pub bin_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializePositionByOperatorLayout {
    #[prost(int32, optional, tag = "1")]
    pub lower_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub width: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub owner: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUpdatePositionOperatorLayout {
    #[prost(string, optional, tag = "1")]
    pub operator: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClaimLiquidityLayout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbWithdrawProtocolFeeLayout {
    #[prost(uint64, optional, tag = "1")]
    pub amount_x: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub amount_y: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "3")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateFeeParametersLayout {
    /// Use the nested structure
    #[prost(message, optional, tag = "1")]
    pub fee_parameter: ::core::option::Option<PbFeeParameterLayout>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateFeeOwnerLayout {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbFundRewardLayout {
    #[prost(int64, optional, tag = "1")]
    pub reward_index: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub amount: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "3")]
    pub carry_forward: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUpdateRewardFunderLayout {
    #[prost(int64, optional, tag = "1")]
    pub reward_index: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub new_funder: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateRewardDurationLayout {
    #[prost(int64, optional, tag = "1")]
    pub reward_index: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub new_duration: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbWithdrawIneligibleRewardLayout {
    #[prost(int64, optional, tag = "1")]
    pub reward_index: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClosePresetParameterLayout {}
/// Add new message for ClosePresetParameter2
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClosePresetParameter2Layout {}
/// Flattened structure for InitializePresetParameter
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializePresetParameterLayout {
    /// Fields moved from PbInitializePresetParameterIxLayout
    /// Based on InitPresetParametersIx in IDL
    ///
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "1")]
    pub bin_step: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "2")]
    pub base_factor: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "3")]
    pub filter_period: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "4")]
    pub decay_period: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "5")]
    pub reduction_factor: ::core::option::Option<u32>,
    /// u32 in IDL
    #[prost(uint32, optional, tag = "6")]
    pub variable_fee_control: ::core::option::Option<u32>,
    /// u32 in IDL
    #[prost(uint32, optional, tag = "7")]
    pub max_volatility_accumulator: ::core::option::Option<u32>,
    /// i32 in IDL
    #[prost(int32, optional, tag = "8")]
    pub min_bin_id: ::core::option::Option<i32>,
    /// i32 in IDL
    #[prost(int32, optional, tag = "9")]
    pub max_bin_id: ::core::option::Option<i32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "10")]
    pub protocol_share: ::core::option::Option<u32>,
}
/// Flattened structure for InitializePresetParameterV2
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializePresetParameterV2Layout {
    /// Fields moved from PbInitializePresetParameterV2IxLayout
    /// Based on InitPresetParameters2Ix in IDL
    ///
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "1")]
    pub index: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "2")]
    pub bin_step: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "3")]
    pub base_factor: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "4")]
    pub filter_period: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "5")]
    pub decay_period: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "6")]
    pub reduction_factor: ::core::option::Option<u32>,
    /// u32 in IDL
    #[prost(uint32, optional, tag = "7")]
    pub variable_fee_control: ::core::option::Option<u32>,
    /// u32 in IDL
    #[prost(uint32, optional, tag = "8")]
    pub max_volatility_accumulator: ::core::option::Option<u32>,
    /// u16 in IDL -> u32
    #[prost(uint32, optional, tag = "9")]
    pub protocol_share: ::core::option::Option<u32>,
    /// u8 in IDL -> u32
    #[prost(uint32, optional, tag = "10")]
    pub base_fee_power_factor: ::core::option::Option<u32>,
}
/// Renamed from SetPairStatusLayout/SetPairStatusPermissionlessLayout
///
/// Removed status field as args should be empty
/// optional uint32 status = 1; // u8 in IDL -> u32
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbTogglePairStatusLayout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUpdateWhitelistedWalletLayout {
    /// Assuming u16 maps to int32
    #[prost(int32, optional, tag = "1")]
    pub idx: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub wallet: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbIncreaseOracleLengthLayout {
    /// Assuming u32 maps to int64 (check Rust type)
    #[prost(int64, optional, tag = "1")]
    pub length_to_add: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbMigratePositionLayout {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbMigrateBinArrayLayout {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateFeesAndRewardsLayout {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSetLockReleaseSlotLayout {
    #[prost(uint64, optional, tag = "1")]
    pub new_lock_release_slot: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSetActivationSlotLayout {
    #[prost(uint64, optional, tag = "1")]
    pub activation_slot: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSetMaxSwappedAmountLayout {
    /// Changed to uint64
    #[prost(uint64, optional, tag = "1")]
    pub swap_cap_deactivate_slot: ::core::option::Option<u64>,
    /// Changed to uint64
    #[prost(uint64, optional, tag = "2")]
    pub max_swapped_amount: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSetPreActivationDurationLayout {
    /// Changed to uint64
    #[prost(uint64, optional, tag = "1")]
    pub pre_activation_duration: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSetPreActivationSwapAddressLayout {
    #[prost(string, optional, tag = "1")]
    pub pre_activation_swap_address: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbIdlWriteLayout {}
/// New layout for SetActivationPoint
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbSetActivationPointLayout {
    /// u64 in IDL
    #[prost(uint64, optional, tag = "1")]
    pub activation_point: ::core::option::Option<u64>,
}
/// New layout for ClaimReward2
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbClaimReward2Layout {
    /// u64 in IDL
    #[prost(uint64, optional, tag = "1")]
    pub reward_index: ::core::option::Option<u64>,
    /// i32 in IDL
    #[prost(int32, optional, tag = "2")]
    pub min_bin_id: ::core::option::Option<i32>,
    /// i32 in IDL
    #[prost(int32, optional, tag = "3")]
    pub max_bin_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
/// Renamed from PbSwapLogLayout, removed event_name, added optional
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSwapLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub from: ::prost::alloc::string::String,
    #[prost(int32, optional, tag = "3")]
    pub start_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub end_bin_id: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "5")]
    pub amount_in: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub amount_out: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "7")]
    pub swap_for_y: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "8")]
    pub fee: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub protocol_fee: ::core::option::Option<u64>,
    #[prost(string, tag = "10")]
    pub fee_bps: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "11")]
    pub host_fee: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCompositionFeeLogFields {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(int32, optional, tag = "2")]
    pub bin_id: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub token_x_fee_amount: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub token_y_fee_amount: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub protocol_token_x_fee_amount: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub protocol_token_y_fee_amount: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub position: ::prost::alloc::string::String,
    #[prost(uint64, repeated, tag = "4")]
    pub amounts: ::prost::alloc::vec::Vec<u64>,
    #[prost(int32, optional, tag = "5")]
    pub active_bin_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbRemoveLiquidityLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub position: ::prost::alloc::string::String,
    #[prost(uint64, repeated, tag = "4")]
    pub amounts: ::prost::alloc::vec::Vec<u64>,
    #[prost(int32, optional, tag = "5")]
    pub active_bin_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbClaimRewardLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub position: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "4")]
    pub reward_index: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub total_reward: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbFundRewardLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub funder: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "3")]
    pub reward_index: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub amount: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializeRewardLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub reward_mint: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub funder: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "4")]
    pub reward_index: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub reward_duration: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUpdateRewardDurationLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "2")]
    pub reward_index: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub old_reward_duration: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub new_reward_duration: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUpdateRewardFunderLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "2")]
    pub reward_index: ::core::option::Option<i64>,
    #[prost(string, tag = "3")]
    pub old_funder: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub new_funder: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbPositionCloseLogFields {
    #[prost(string, tag = "1")]
    pub position: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub owner: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbClaimFeeLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub position: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "4")]
    pub fee_x: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub fee_y: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbLbPairCreateLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(int32, optional, tag = "2")]
    pub bin_step: ::core::option::Option<i32>,
    #[prost(string, tag = "3")]
    pub token_x: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub token_y: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbPositionCreateLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub position: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbFeeParameterUpdateLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "2")]
    pub protocol_share: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub base_factor: ::core::option::Option<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbIncreaseObservationLogFields {
    #[prost(string, tag = "1")]
    pub oracle: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "2")]
    pub new_observation_length: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbWithdrawIneligibleRewardLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub reward_mint: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "3")]
    pub amount: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUpdatePositionOperatorLogFields {
    #[prost(string, tag = "1")]
    pub position: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub old_operator: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_operator: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUpdatePositionLockReleaseSlotLogFields {
    #[prost(string, tag = "1")]
    pub position: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "2")]
    pub current_slot: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub new_lock_release_slot: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub old_lock_release_slot: ::core::option::Option<i64>,
    #[prost(string, tag = "5")]
    pub sender: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbGoToABinLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(int32, optional, tag = "2")]
    pub from_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub to_bin_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUpdatePositionLockReleasePointLogFields {
    #[prost(string, tag = "1")]
    pub position: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "2")]
    pub current_point: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub new_lock_release_point: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub old_lock_release_point: ::core::option::Option<i64>,
    #[prost(string, tag = "5")]
    pub sender: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUnknownEvent1LogFields {
    #[prost(string, tag = "1")]
    pub vault: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub escrow: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
    #[prost(int64, optional, tag = "4")]
    pub amount: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub vault_total_claimed_token: ::core::option::Option<i64>,
}
/// New event message types for the recently added events
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbIncreasePositionLengthLogFields {
    #[prost(string, tag = "1")]
    pub position: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "2")]
    pub new_length: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbDecreasePositionLengthLogFields {
    #[prost(string, tag = "1")]
    pub position: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "2")]
    pub new_length: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbDynamicFeeParameterUpdateLogFields {
    #[prost(string, tag = "1")]
    pub lb_pair: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "2")]
    pub filter_period: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub decay_period: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub reduction_factor: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub variable_fee_control: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub max_volatility_accumulator: ::core::option::Option<u32>,
}
/// Wrapper for all event types
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbEventLogWrapper {
    #[prost(string, tag = "1")]
    pub event_name: ::prost::alloc::string::String,
    #[prost(
        oneof = "pb_event_log_wrapper::EventFields",
        tags = "2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25"
    )]
    pub event_fields: ::core::option::Option<pb_event_log_wrapper::EventFields>,
}
/// Nested message and enum types in `PbEventLogWrapper`.
pub mod pb_event_log_wrapper {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventFields {
        #[prost(message, tag = "2")]
        SwapLogFields(super::PbSwapLogFields),
        #[prost(message, tag = "3")]
        CompositionFeeLogFields(super::PbCompositionFeeLogFields),
        #[prost(message, tag = "4")]
        AddLiquidityLogFields(super::PbAddLiquidityLogFields),
        #[prost(message, tag = "5")]
        RemoveLiquidityLogFields(super::PbRemoveLiquidityLogFields),
        #[prost(message, tag = "6")]
        ClaimRewardLogFields(super::PbClaimRewardLogFields),
        #[prost(message, tag = "7")]
        FundRewardLogFields(super::PbFundRewardLogFields),
        #[prost(message, tag = "8")]
        InitializeRewardLogFields(super::PbInitializeRewardLogFields),
        #[prost(message, tag = "9")]
        UpdateRewardDurationLogFields(super::PbUpdateRewardDurationLogFields),
        #[prost(message, tag = "10")]
        UpdateRewardFunderLogFields(super::PbUpdateRewardFunderLogFields),
        #[prost(message, tag = "11")]
        PositionCloseLogFields(super::PbPositionCloseLogFields),
        #[prost(message, tag = "12")]
        ClaimFeeLogFields(super::PbClaimFeeLogFields),
        #[prost(message, tag = "13")]
        LbPairCreateLogFields(super::PbLbPairCreateLogFields),
        #[prost(message, tag = "14")]
        PositionCreateLogFields(super::PbPositionCreateLogFields),
        #[prost(message, tag = "15")]
        FeeParameterUpdateLogFields(super::PbFeeParameterUpdateLogFields),
        #[prost(message, tag = "16")]
        IncreaseObservationLogFields(super::PbIncreaseObservationLogFields),
        #[prost(message, tag = "17")]
        WithdrawIneligibleRewardLogFields(super::PbWithdrawIneligibleRewardLogFields),
        #[prost(message, tag = "18")]
        UpdatePositionOperatorLogFields(super::PbUpdatePositionOperatorLogFields),
        #[prost(message, tag = "19")]
        UpdatePositionLockReleaseSlotLogFields(
            super::PbUpdatePositionLockReleaseSlotLogFields,
        ),
        #[prost(message, tag = "20")]
        GoToABinLogFields(super::PbGoToABinLogFields),
        #[prost(message, tag = "21")]
        UpdatePositionLockReleasePointLogFields(
            super::PbUpdatePositionLockReleasePointLogFields,
        ),
        #[prost(message, tag = "22")]
        UnknownEvent1LogFields(super::PbUnknownEvent1LogFields),
        #[prost(message, tag = "23")]
        IncreasePositionLengthLogFields(super::PbIncreasePositionLengthLogFields),
        #[prost(message, tag = "24")]
        DecreasePositionLengthLogFields(super::PbDecreasePositionLengthLogFields),
        #[prost(message, tag = "25")]
        DynamicFeeParameterUpdateLogFields(super::PbDynamicFeeParameterUpdateLogFields),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializeLbPair2Layout {
    #[prost(int32, optional, tag = "1")]
    pub active_id: ::core::option::Option<i32>,
    /// \[u8; 96\] in IDL
    #[prost(uint32, repeated, tag = "2")]
    pub padding: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbClaimFee2Layout {
    #[prost(int32, optional, tag = "1")]
    pub min_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub max_bin_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbInitializeCustomizablePermissionlessLbPair2Layout {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<PbCustomizableParams>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidity2Layout {
    #[prost(message, optional, tag = "1")]
    pub liquidity_parameter: ::core::option::Option<PbLiquidityParameter>,
    #[prost(message, optional, tag = "2")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityByStrategy2Layout {
    #[prost(message, optional, tag = "1")]
    pub liquidity_parameter: ::core::option::Option<PbLiquidityParameterByStrategy>,
    #[prost(message, optional, tag = "2")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityOneSidePrecise2Layout {
    #[prost(message, optional, tag = "1")]
    pub liquidity_parameter: ::core::option::Option<
        PbAddLiquiditySingleSidePreciseParameter2,
    >,
    #[prost(message, optional, tag = "2")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquidityByStrategyOneSide2Layout {
    /// Corrected AGAIN back to the specific type for this instruction
    #[prost(message, optional, tag = "1")]
    pub liquidity_parameter: ::core::option::Option<
        PbLiquidityParameterByStrategyOneSide,
    >,
    #[prost(message, optional, tag = "2")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbRemoveLiquidity2Layout {
    #[prost(message, repeated, tag = "1")]
    pub bin_liquidity_removal: ::prost::alloc::vec::Vec<PbBinLiquidityReduction>,
    #[prost(message, optional, tag = "2")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbRemoveLiquidityByRange2Layout {
    #[prost(int32, optional, tag = "1")]
    pub from_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub to_bin_id: ::core::option::Option<i32>,
    /// u16 in IDL
    #[prost(uint32, optional, tag = "3")]
    pub bps_to_remove: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "4")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSwap2Layout {
    #[prost(uint64, optional, tag = "1")]
    pub amount_in: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub min_amount_out: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "3")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSwapExactOut2Layout {
    #[prost(uint64, optional, tag = "1")]
    pub max_in_amount: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub out_amount: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "3")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbSwapWithPriceImpact2Layout {
    #[prost(uint64, optional, tag = "1")]
    pub amount_in: ::core::option::Option<u64>,
    /// This field is Option<i32> in IDL
    #[prost(int32, optional, tag = "2")]
    pub active_id: ::core::option::Option<i32>,
    /// u16 in IDL
    #[prost(uint32, optional, tag = "3")]
    pub max_price_impact_bps: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "4")]
    pub remaining_accounts_info: ::core::option::Option<PbRemainingAccountsInfo>,
}
/// No arguments
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClosePosition2Layout {}
/// Maps to updateFeesAndReward2 in IDL
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbUpdateFeesAndReward2Layout {
    #[prost(int32, optional, tag = "1")]
    pub min_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub max_bin_id: ::core::option::Option<i32>,
}
/// No arguments
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbClosePositionIfEmptyLayout {}
/// No arguments
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbInitializeTokenBadgeLayout {}
/// No arguments
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbCreateClaimProtocolFeeOperatorLayout {}
/// No arguments
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbCloseClaimProtocolFeeOperatorLayout {}
/// Corresponds to RemainingAccountsSlice struct in IDL
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbRemainingAccountsSlice {
    #[prost(enumeration = "PbAccountsType", optional, tag = "1")]
    pub accounts_type: ::core::option::Option<i32>,
    /// u8 in IDL
    #[prost(uint32, optional, tag = "2")]
    pub length: ::core::option::Option<u32>,
}
/// Corresponds to RemainingAccountsInfo struct in IDL
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbRemainingAccountsInfo {
    #[prost(message, repeated, tag = "1")]
    pub slices: ::prost::alloc::vec::Vec<PbRemainingAccountsSlice>,
}
/// Corresponds to CustomizableParams struct in IDL
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCustomizableParams {
    #[prost(int32, optional, tag = "1")]
    pub active_id: ::core::option::Option<i32>,
    /// u16 in IDL
    #[prost(uint32, optional, tag = "2")]
    pub bin_step: ::core::option::Option<u32>,
    /// u16 in IDL
    #[prost(uint32, optional, tag = "3")]
    pub base_factor: ::core::option::Option<u32>,
    /// u8 in IDL
    #[prost(uint32, optional, tag = "4")]
    pub activation_type: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub has_alpha_vault: ::core::option::Option<bool>,
    /// Option<u64> in IDL
    #[prost(uint64, optional, tag = "6")]
    pub activation_point: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "7")]
    pub creator_pool_on_off_control: ::core::option::Option<bool>,
    /// u8 in IDL
    #[prost(uint32, optional, tag = "8")]
    pub base_fee_power_factor: ::core::option::Option<u32>,
    /// Renamed padding_numeric to padding for final JSON output
    ///
    /// \[u8; 62\] in IDL represented as numeric array
    #[prost(uint32, repeated, tag = "10")]
    pub padding: ::prost::alloc::vec::Vec<u32>,
}
/// Corresponds to LiquidityParameter struct in IDL
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbLiquidityParameter {
    #[prost(uint64, optional, tag = "1")]
    pub amount_x: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub amount_y: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "3")]
    pub bin_liquidity_dist: ::prost::alloc::vec::Vec<PbBinLiquidityDistribution>,
}
/// Corresponds to BinLiquidityDistribution struct in IDL
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbBinLiquidityDistribution {
    #[prost(int32, optional, tag = "1")]
    pub bin_id: ::core::option::Option<i32>,
    /// u16 in IDL
    #[prost(uint32, optional, tag = "2")]
    pub distribution_x: ::core::option::Option<u32>,
    /// u16 in IDL
    #[prost(uint32, optional, tag = "3")]
    pub distribution_y: ::core::option::Option<u32>,
}
/// Corresponds to LiquidityParameterByStrategy struct in IDL
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbLiquidityParameterByStrategy {
    #[prost(uint64, optional, tag = "1")]
    pub amount_x: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub amount_y: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub active_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub max_active_bin_slippage: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "5")]
    pub strategy_parameters: ::core::option::Option<PbStrategyParameters>,
}
/// Corresponds to StrategyParameters struct in IDL
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbStrategyParameters {
    #[prost(int32, optional, tag = "1")]
    pub min_bin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub max_bin_id: ::core::option::Option<i32>,
    #[prost(enumeration = "PbStrategyType", optional, tag = "3")]
    pub strategy_type: ::core::option::Option<i32>,
    /// Field for numeric array representation
    #[prost(uint32, repeated, tag = "4")]
    pub parameters: ::prost::alloc::vec::Vec<u32>,
}
/// Corresponds to AddLiquiditySingleSidePreciseParameter2 struct in IDL
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAddLiquiditySingleSidePreciseParameter2 {
    /// Use Layout name
    #[prost(message, repeated, tag = "1")]
    pub bins: ::prost::alloc::vec::Vec<PbCompressedBinDepositAmountLayout>,
    #[prost(uint64, optional, tag = "2")]
    pub decompress_multiplier: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub max_amount: ::core::option::Option<u64>,
}
/// Corresponds to CompressedBinDepositAmount struct in IDL (Use Layout name)
///
/// Keep Layout name
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCompressedBinDepositAmountLayout {
    /// Assuming i32 in Rust
    #[prost(int32, tag = "1")]
    pub bin_id: i32,
    /// u128 -> string
    #[prost(string, tag = "2")]
    pub amount_total: ::prost::alloc::string::String,
}
/// New message definition based on cStruct("binId" / Int32sl, "bpsToRemove" / Int16ul)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbBinLiquidityReduction {
    #[prost(int32, tag = "1")]
    pub bin_id: i32,
    /// Protobuf uses uint32 for u16
    #[prost(uint32, tag = "2")]
    pub bps_to_remove: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbLiquidityParameterByStrategyOneSide {
    #[prost(uint64, optional, tag = "1")]
    pub amount: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub active_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub max_active_bin_slippage: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4")]
    pub strategy_parameters: ::core::option::Option<PbStrategyParameters>,
}
/// Nested structure for fee parameters
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PbFeeParameterLayout {
    /// Represents Int16ul
    #[prost(uint32, optional, tag = "1")]
    pub protocol_share: ::core::option::Option<u32>,
    /// Represents Int16ul
    #[prost(uint32, optional, tag = "2")]
    pub base_factor: ::core::option::Option<u32>,
}
/// Corresponds to AccountsType enum in IDL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PbAccountsType {
    TransferHookX = 0,
    TransferHookY = 1,
    TransferHookReward = 2,
}
impl PbAccountsType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TransferHookX => "TRANSFER_HOOK_X",
            Self::TransferHookY => "TRANSFER_HOOK_Y",
            Self::TransferHookReward => "TRANSFER_HOOK_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRANSFER_HOOK_X" => Some(Self::TransferHookX),
            "TRANSFER_HOOK_Y" => Some(Self::TransferHookY),
            "TRANSFER_HOOK_REWARD" => Some(Self::TransferHookReward),
            _ => None,
        }
    }
}
/// Corresponds to StrategyType enum in IDL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PbStrategyType {
    SpotOneSide = 0,
    CurveOneSide = 1,
    BidAskOneSide = 2,
    SpotBalanced = 3,
    CurveBalanced = 4,
    BidAskBalanced = 5,
    /// Note: IDL uses 'ImBalanced'
    SpotImbalanced = 6,
    /// Note: IDL uses 'ImBalanced'
    CurveImbalanced = 7,
    /// Note: IDL uses 'ImBalanced'
    BidAskImbalanced = 8,
}
impl PbStrategyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SpotOneSide => "SPOT_ONE_SIDE",
            Self::CurveOneSide => "CURVE_ONE_SIDE",
            Self::BidAskOneSide => "BID_ASK_ONE_SIDE",
            Self::SpotBalanced => "SPOT_BALANCED",
            Self::CurveBalanced => "CURVE_BALANCED",
            Self::BidAskBalanced => "BID_ASK_BALANCED",
            Self::SpotImbalanced => "SPOT_IMBALANCED",
            Self::CurveImbalanced => "CURVE_IMBALANCED",
            Self::BidAskImbalanced => "BID_ASK_IMBALANCED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SPOT_ONE_SIDE" => Some(Self::SpotOneSide),
            "CURVE_ONE_SIDE" => Some(Self::CurveOneSide),
            "BID_ASK_ONE_SIDE" => Some(Self::BidAskOneSide),
            "SPOT_BALANCED" => Some(Self::SpotBalanced),
            "CURVE_BALANCED" => Some(Self::CurveBalanced),
            "BID_ASK_BALANCED" => Some(Self::BidAskBalanced),
            "SPOT_IMBALANCED" => Some(Self::SpotImbalanced),
            "CURVE_IMBALANCED" => Some(Self::CurveImbalanced),
            "BID_ASK_IMBALANCED" => Some(Self::BidAskImbalanced),
            _ => None,
        }
    }
}
