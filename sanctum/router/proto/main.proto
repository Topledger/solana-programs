syntax = "proto2";

package sf.solana.block_meta.v1;

message PbSwapViaStakeArgsLayout {
  required uint64 amount = 1;
  required uint32 bridgeStakeSeed = 2;
}

message PbStakeWrappedSolLayout {
  required uint64 amount = 1;
}

message PbSwapViaStakeLayout {
  required PbSwapViaStakeArgsLayout args = 1;
}

message PbPrefundWithdrawStakeLayout {
  required PbSwapViaStakeArgsLayout args = 1;
}

message PbPrefundSwapViaStakeLayout {
  required PbSwapViaStakeArgsLayout args = 1;
}

message Arg {
  required string instruction_type = 1;
  optional PbStakeWrappedSolLayout stakeWrappedSol = 2;
  optional PbSwapViaStakeLayout swapViaStake = 3;
  optional PbPrefundWithdrawStakeLayout prefundWithdrawStake = 4;
  optional PbPrefundSwapViaStakeLayout prefundSwapViaStake = 5;
}

message InputAccounts {
  optional string user = 1;
  optional string wsolFrom = 2;
  optional string destTokenTo = 3;
  optional string wsolBridgeIn = 4;
  optional string solBridgeOut = 5;
  optional string destTokenFeeTokenAccount = 6;
  optional string destTokenMint = 7;
  optional string wsolMint = 8;
  optional string tokenProgram = 9;
  optional string systemProgram = 10;
  optional string srcTokenFrom = 11;
  optional string bridgeStake = 12;
  optional string srcTokenMint = 13;
  optional string payer = 14;
  optional string feeTokenAccount = 15;
  optional string mint = 16;
  optional string admin = 17;
  optional string closeTo = 18;
  optional string withdrawTo = 19;
  optional string stakeAccount = 20;
  optional string prefunder = 21;
  optional string slumdogStake = 22;
  optional string unstakeitProgram = 23;
  optional string unstakePool = 24;
  optional string poolSolReserves = 25;
  optional string unstakeFee = 26;
  optional string slumdogStakeAccRecord = 27;
  optional string unstakeProtocolFee = 28;
  optional string unstakeProtocolFeeDest = 29;
  optional string clock = 30;
  optional string stakeProgram = 31;

}

message Meta {
  required string block_date = 1;
  required int64 block_time = 2;
  required string tx_id = 3;
  required string dapp = 4;
  required uint64 block_slot = 5;
  required uint32 instruction_index = 7;
  required bool is_inner_instruction = 8;
  required uint32 inner_instruction_index = 9;
  required string instruction_type = 10;
  required Arg args = 11;
  required InputAccounts input_accounts = 12;
}

message Output {
  repeated Meta data = 1;
}